form {
  .captcha {
    .captcha_text {
      font-size: $font-size-base;
      font-weight: normal;
      text-align: left;
    }
  }

  &.jquery-validation {
    input[type="text"],
    input[type="number"],
    input[type="tel"],
    input[type="email"],
    textarea,
    select {
      &.error {
        background-color: shift-color($danger, -10) !important;
        clear: left;
      }
    }
  }

  .form-group {
    &.has-error {
      label, .help-block {
        color: shift-color($danger, 6);
      }

      input {
        border-color: shift-color($danger, -9);
      }
    }
  }

  p.error {
    @extend .alert;
    @extend .alert-danger;
  }

  .explanation {
    margin-top: 10px;
  }

  .checkbox-group, .radio-group {
    > .radio-inline, > .checkbox-inline {
      margin-left: 0 !important;
      margin-right: 20px;
      cursor: default;

      & ~ .mandatory {
        margin-left: -20px;
        margin-right: 20px;
      }
    }
  }

  .custom-control-label {
    &:hover::before {
      background-color: $table-hover-bg;
      @include transition-ease(0.2s);
    }
  }

  &.jquery-validation {
    label.error {
      color: shift-color($danger, 6);
    }
  }

  label {
    > .mandatory {
      display: inline-block;
    }

    + .explanation {
      display: block;
    }
  }

  .bootstrap-select {
    .btn-select {
      background-color: $input-bg;
      color: $input-color;
      border: 1px solid $input-border-color;
    }

    .dropdown-toggle:focus {
      outline: none !important;
    }
  }

  .input-group-append {
    .input-group-text {
      cursor: pointer;
      @include transition-ease();

      &:hover {
        background-color: darken(#E9ECEF, 5%);
      }
    }
  }

  .bootstrap-datetimepicker-widget {
    .collapse.in {
      display: block;
    }
  }
}

.choices {
  &[data-type^="select-"] {
    .choices__inner {
      @extend .form-control;

      .choices__list {
        padding: 0;
      }
    }
  }

  &[data-type="text"] {
    margin-bottom: 0;
    font-size: initial;
    position: relative;
    flex: 1 1 auto;
    width: 1%;

    .choices__inner {
      display: block;
      background-color: white;
      border: 0;
      border-radius: 0;
      font-size: initial;
      min-height: 0;
      overflow: visible;
      padding: 0 !important;
      height: auto !important;
    }

    input[type="text"].choices__input--cloned {
      @extend .form-control;
      width: 100% !important;
      margin-bottom: 0;
    }
  }

  &.is-focused {
    &[data-type^="select-"] {
      .choices__inner {
        color: $input-focus-color;
        background-color: $input-focus-bg;
        border-color: $input-focus-border-color;
        outline: 0;
        // Avoid using mixin so we can pass custom focus shadow properly
        @if $enable-shadows {
          box-shadow: $input-box-shadow, $input-focus-box-shadow;
        } @else {
          box-shadow: $input-focus-box-shadow;
        }
      }
    }
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .form-control#{$infix}-base {
      @include form-control-base();
    }

    .form-control#{$infix}-sm {
      @include form-control-sm();
    }

    .form-control#{$infix}-lg {
      @include form-control-lg();
    }
  }
}

.form-control-sm {
  .input-group & {
    &:not(:last-child) {
      @include border-end-radius(0);
    }
  }

  .input-group & {
    &:not(:first-child) {
      @include border-start-radius(0);
    }
  }
}

.form-control-lg {
  .input-group & {
    &:not(:last-child) {
      @include border-end-radius(0);
    }
  }

  .input-group & {
    &:not(:first-child) {
      @include border-start-radius(0);
    }
  }
}
